import React from 'react';
import {shallow} from 'enzyme';
import EditableInput from './EditableInput';
import './EditableInput.css';

it('displays the value', () => {
    const editableInput = shallow(
            <EditableInput
                value={3}
                show={(parsed) => "show "+parsed}
            />);

    expect(editableInput.find('input').props().value)
        .toEqual("show 3");
});

it('hides bad or partial input from parent', () => {
    const originalVal = Math.floor(100*Math.random());
    let parentVal = originalVal;
    const updateParent = (val) => { parentVal = val; }

    const editableInput = shallow(
                <EditableInput
                    updateParent={updateParent}
                    parse={parseInt}
                    isValid={(rawInput) => !isNaN(parseInt(rawInput))}
                />);
    editableInput.find('input').simulate('change',
            {target: {value: "not-an-int"}});

    expect(parentVal).toEqual(originalVal);
    expect(editableInput.find('input').props().value)
        .toEqual("not-an-int");
    expect(editableInput.find('input.invalid').length).toEqual(1);
});

it('hides bad input generated by parent from user', () => {
    const editableInput = shallow(
                <EditableInput
                    updateParent={() => {}}
                    value="0"
                    parse={parseInt}
                    isValid={(rawInput) => !isNaN(parseInt(rawInput))}
                />,
                { lifecycleExperimental: true }
                );
    editableInput.setProps({value: "not-an-int"});
    expect(editableInput.find('input').props().value)
        .toEqual("0");
    editableInput.setProps({value: 1});
    expect(editableInput.find('input').props().value)
        .toEqual("1");
});


it('propagates valid input', () => {
    const originalVal = Math.floor(100*Math.random());
    let parentVal = originalVal;
    const updateParent = (val) => { parentVal = val; }

    const editableInput = shallow(
                <EditableInput
                    updateParent={updateParent}
                    parse={parseInt}
                />);
    editableInput.find('input').simulate('change',
            {target: {value: "400"}});

    expect(parentVal).toEqual(400);
    expect(editableInput.find('input').props().value)
        .toEqual("400");
    expect(editableInput.find('input.invalid').length).toEqual(0);
});


it('updates the displayed value from new props if needed', () => {
    const small = 5
    const alsoSmall = 8;
    const big = 1000;

    const editableInput = new EditableInput({
            value: small,
            parse: parseInt,
            equivalent: (parsedA, parsedB) => {
                return Math.abs(parsedA - parsedB) < 10;
            }
        });
    editableInput.setState = jest.fn();

    editableInput.componentWillReceiveProps({value: alsoSmall});
    expect(editableInput.setState.mock.calls.length).toBe(0);

    editableInput.componentWillReceiveProps({value: big});
    expect(editableInput.setState.mock.calls.length).toBe(1);

});

